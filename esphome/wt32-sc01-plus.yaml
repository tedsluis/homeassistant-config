# WT32-SC01 PLUS 
# ZX3D50CE08S-v15-USRC 230228
# 3.5 inch 320x480, driver ST7796UI, interface MCU8080 8Bit, color RGB565, ILI9488 controller 
# single touch capacitive FT6336U I2S
# ESP32-S3 model ESP32-WROVER-B, WiFi + BT + BLE MCU module, 4MB SPI flash and 8MB PSRAM
# https://www.marutsu.co.jp/contents/shop/marutsu/datasheet/khe_WT32-SC01-PLUS.pdf-----
# https://esphome.io/components/touchscreen/ft63x6.html
# https://www.esp32.com/viewtopic.php?t=39219
# https://github.com/esphome/esphome/pull/6537 Implement i80 bus for ili9xxx displays
# https://esphome.io/cookbook/lvgl.html
# 

# examples:
# https://github.com/bearpawmaxim/esphome-configs/tree/master
# https://github.com/albert-canfield/HA-panel-esphome/blob/main/ha-panel.yaml
# https://gist.github.com/clydebarrow?page=1

substitutions:
  device_name: wt32-sc01-plus
  friendly_name: WT32-SC01 Plus
  device_ip: 192.168.11.196
  # icons
  lightbulb: "\U000F1802"
  boiler_on: "\U000F0238"
  boiler_off: "\U000F1722"
  radiator: "\U000F0438"
  ceiling_light: "\U000F0769"
  house_temp: "\U000F0F55"
  #weather icons
  cloudy: "\U000F0590"
  cloudyalert: "\U000F0F2F"
  cloudyarrowright: "\U000F0E6E"
  fog: "\U000F0591"
  hail: "\U000F0592"
  hazy: "\U000F0F30"
  hurricane: "\U000F0898"
  lightning: "\U000F0593"
  lightningrainy: "\U000F067E"
  night: "\U000F0594"
  nightpartlycloudy: "\U000F0F31"
  partlycloudy: "\U000F0595"
  partlylightning: "\U000F0F32"
  partlyrainy: "\U000F0F33"
  partlysnowy: "\U000F0F34"
  partlysnowyrainy: "\U000F0F35"
  pouring: "\U000F0596"
  rainy: "\U000F0597"
  snowy: "\U000F0598"
  snowyheavy: "\U000F0F36"
  snowyrainy: "\U000F067F"
  sunny: "\U000F0599"
  sunnyalert: "\U000F0F37"
  sunnyoff: "\U000F14E4"
  sunset: "\U000F059A"
  sunsetdown: "\U000F059B"
  sunsetup: "\U000F059C"
  tornado: "\U000F0F38"
  windy: "\U000F059D"
  windyvariant: "\U000F059E"
  happyface: "\U000F01F5"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: esphome.w32-sc01-plus
    version: "1.1"
  platformio_options:
    build_unflags: -Werror=all
    board_build.flash_mode: dio
    board_build.flash_size: 16MB
    board_build.partitions: "/config/esphome/custom_partitions.csv"
  # on_boot:
  #   - delay: 15s
  #   - lvgl.widget.hide: boot_screen
  #   - delay: 30s
  #   # - script.execute: main_page

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: y
      CONFIG_ESP32S3_DATA_CACHE_64KB: y
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y
      CONFIG_ESPTOOLPY_FLASHSIZE_16MB: y
      CONFIG_ESPTOOLPY_FLASHFREQ_40M: y
      CONFIG_ESPTOOLPY_FLASHMODE_DIO: y
      CONFIG_PARTITION_TABLE_CUSTOM_FILENAME: "/config/esphome/custom_partitions.csv"


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key
  # on_client_connected:
  #   - if:
  #       condition:
  #         lambda: 'return (0 == client_info.find("Home Assistant "));'
  #       then:
  #         - lvgl.widget.show: lbl_hastatus
  # on_client_disconnected:
  #   - if:
  #       condition:
  #         lambda: 'return (0 == client_info.find("Home Assistant "));'
  #       then:
  #         - lvgl.widget.hide: lbl_hastatus
          
ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${device_ip}
    gateway: 192.168.11.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: '${device_name}_Fallback_Hotspot'
    password: !secret wifi_password

captive_portal:

web_server:
  port: 80
  auth:
    username: admin
    password: !secret webserver_password

time:
  - platform: homeassistant
    id: homeassistant_time

sensor:
  - platform: wifi_signal
    name: '${device_name}_wifi_signal'
    update_interval: 60s
  - platform: uptime
    id: uptime_internal

  # - platform: homeassistant
  #   id: house_setpoint_ha
  #   entity_id: input_number.house_temperature_setpoint
  #   on_value:
  #     - logger.log: id(house_setpoint_ha).state.c_str()
  #     - lvgl.label.update:
  #         id: house_setpoint_display
  #         text: 
  #           format: "%.1f °C"
  #           args: ["id(house_setpoint_ha).state"]
      
  # - platform: homeassistant
  #   id: house_temp_sensor
  #   entity_id: sensor.house_average_temperature
  #   on_value:
  #     then:
  #        - lvgl.label.update:
  #           id: display_house_temp
  #           text: 
  #             format: "$house_temp %.1f °C"
  #             args: ["id(house_temp_sensor).state"]
 
text_sensor:
  - platform: version
    name: '${device_name}_version'
  - platform: wifi_info
    ip_address:
      name: ${device_ip}
    ssid:
      name: !secret wifi_ssid
  - platform: homeassistant
    id: ha_time
    entity_id: sensor.time
    
  #   on_value:
  #     then:
  #       - lvgl.label.update:
  #           id: display_time
  #           text: !lambda return id(ha_time).state.c_str();
  # - platform: homeassistant
  #   id: ha_date
  #   entity_id: sensor.date
  #   on_value:
  #     then:
  #       - lvgl.label.update:
  #           id: display_date
  #           text: !lambda |-
  #             std::string date_str = id(ha_date).state.c_str();
  #             std::string year = date_str.substr(0, 4);
  #             std::string month = date_str.substr(5, 2);
  #             std::string day = date_str.substr(8, 2);
  #             return (day + "/" + month + "/" + year).c_str();

  # - platform: template
  #   id: weather_condition_icon
  #   lambda: |-
  #     std::string state = id(ha_weather_cond).state.c_str();
  #     if (state == "RAINY") { return std::string("$rainy"); }
  #     else if (state == "CLOUDY") { return std::string("$cloudy"); }
  #     else if (state == "PARTLYCLOUDY") { return std::string("$partlycloudy"); }
  #     else if (state == "SUNNY") { return std::string("$sunny"); }
  #     else if (state == "FOG") { return std::string("$fog"); }
  #     else if (state == "HAIL") { return std::string("$hail"); }
  #     else if (state == "HAZY") { return std::string("$hazy"); }
  #     else if (state == "LIGHTNING") { return std::string("$lightning"); }
  #     else if (state == "LIGHTNINGRAINY") { return std::string("$lightningrainy"); }
  #     else if (state == "NIGHT") { return std::string("$night"); }
  #     else if (state == "NIGHTPARTLYCLOUDY") { return std::string("$nightpartlycloudy"); }
  #     else if (state == "PARTLYRAINY") { return std::string("$partlyrainy"); }
  #     else if (state == "PARTLYLIGHTNING") { return std::string("$partlylightning"); }
  #     else if (state == "PARTLYSNOWY") { return std::string("$partlysnowy"); }
  #     else if (state == "PARTLYSNOWYRAINY") { return std::string("$partlysnowyrainy"); }
  #     else if (state == "POURING") { return std::string("$pouring"); }
  #     else if (state == "SNOWY") { return std::string("$snowy"); }
  #     else if (state == "SNOWYHEAVY") { return std::string("$snowyheavy"); }
  #     else if (state == "SUNSET") { return std::string("$sunset"); }
  #     else if (state == "TORNADO") { return std::string("$tornado"); }
  #     else if (state == "WINDY") { return std::string("$windy"); }
  #     else if (state == "HURRICANE") { return std::string("$hurricane"); }
  #     return std::string("$happyface");
  #   on_value:
  #     then:
  #       - logger.log: id(weather_condition_icon).state.c_str()
  #       - lvgl.label.update:
  #           id: display_weather_icon
  #           text: !lambda return id(weather_condition_icon).state.c_str();
  


#-------------------------------------------
# Graphicsd and Fonts
#-------------------------------------------

image:
  - file: 'images/back1.png'
    id: back1
    type: RGB565
  
  - file: 'images/ha_logo.png'
    id: boot_logo
    resize: 200x200
    type: RGB565
    use_transparency: true
    
font:
  - file: "gfonts://Roboto"
    id: roboto24
    size: 24
    bpp: 4
    extras:
      - file: 'fonts/materialdesignicons-webfont.ttf' # http://materialdesignicons.com/cdn/7.4.47/ 
        glyphs: [
          "\U000F004B",
          "\U0000f0ed",
          "\U000F006E",
          "\U000F012C",
          "\U000F179B",
          "\U000F0748",
          "\U000F1A1B",
          "\U000F02DC",
          "\U000F0A02",
          "\U000F035F",
          "\U000F0156",
          "\U000F0C5F", 
          "\U000f0084",
          "\U000f0091",
          "\U000F050F", # Thermometer
          $house_temp 
          ]
  - file: "gfonts://Roboto"
    id: weather_icons
    size: 110
    bpp: 4
    extras:
      - file: 'fonts/materialdesignicons-webfont.ttf' # http://materialdesignicons.com/cdn/7.4.47/ 
        glyphs: [
          $cloudy,
          $cloudyalert,
          $cloudyarrowright,
          $fog,
          $hail,
          $hazy,
          $hurricane,
          $lightning,
          $lightningrainy,
          $night,
          $nightpartlycloudy,
          $partlycloudy,
          $partlylightning,
          $partlyrainy,
          $partlysnowy,
          $partlysnowyrainy,
          $pouring,
          $rainy,
          $snowy,
          $snowyheavy,
          $snowyrainy,
          $sunny,
          $sunnyalert,
          $sunnyoff,
          $sunset,
          $sunsetdown,
          $sunsetup,
          $tornado,
          $windy,
          $windyvariant,
          $happyface
        ]

  - file: 'fonts/materialdesignicons-webfont.ttf' # http://materialdesignicons.com/cdn/7.4.47/ 
    id: light32
    size: 32
    bpp: 4
    glyphs: [
      "\U000F0335", # mdi-lightbulb
      "\U000F0769", # mdi-ceiling-light
      "\U000F08DD", # mdi-floor-lamp
      "\U000F12BA", # mdi-string-lights
      ]          
      
  - file: "gfonts://Roboto"
    id: roboto40
    size: 40
    bpp: 4
  
  - file: "gfonts://Roboto"
    id: btn_icons_font
    size: 70
    bpp: 4
    extras:
      - file: 'fonts/materialdesignicons-webfont.ttf' # http://materialdesignicons.com/cdn/7.4.47/ 
        glyphs: [
          $lightbulb,
          $boiler_on,
          $boiler_off,
          $radiator,
          $ceiling_light,
          $house_temp
        ]
    
  - file: "gfonts://Roboto"
    id: btn_icons_font2
    size: 50
    bpp: 4
    extras:
      - file: 'fonts/materialdesignicons-webfont.ttf' # http://materialdesignicons.com/cdn/7.4.47/ 
        glyphs: [
          $lightbulb,
          $house_temp
        ]

  - file: "gfonts://Roboto"
    id: roboto90
    size: 90
    bpp: 4          
  - file: "fonts/Roboto-Regular.ttf"
    id: my_font
    size: 12

switch:
  - platform: restart
    name: "${device_name}_Restart"


external_components:
  - source: github://pr#6537
    components: [i80, io_bus, ili9xxx, spi]
    refresh: 1d
  - source: github://pr#7453
    components: [lvgl]
    refresh: 1h

power_supply:
  - id: backlight
    enable_on_boot: true
    pin:
      ignore_strapping_warning: true
      number: GPIO45

i80:
  dc_pin: 
    ignore_strapping_warning: true
    number: 0
  data_pins: 
    - 9
    - ignore_strapping_warning: true
      number: 46
    - ignore_strapping_warning: true
      number: 3
    - 8
    - 18
    - 17
    - 16
    - 15
  wr_pin: 47
  
i2c:
  sda: 6
  scl: 5

psram:
  speed: 80MHz

touchscreen:
  - platform: ft63x6
    id: my_touchscreen
    interrupt_pin: 7
    transform:
      swap_xy: true
      mirror_x: true
    display: my_display
    on_touch:
      - logger.log:
            format: Touch at (%d, %d)
            args: [touch.x, touch.y]
      - lambda: |-
            ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
                touch.x,
                touch.y,
                touch.x_raw,
                touch.y_raw
                );
      # - script.stop: screen_light
      # - script.execute: screen_light


display:
  - platform: ili9xxx
    id: my_display
    bus_type: i80
    model: st7796
    dimensions:
      height: 320
      width: 480
    transform:
      mirror_y: false
      mirror_x: false
      swap_xy: true
    reset_pin: 4
    data_rate: 4MHz
    color_order: bgr
    invert_colors: true
    auto_clear_enabled: false
    update_interval: never


#------------------------------------------
# Content
#------------------------------------------
lvgl:
  log_level: TRACE
  displays:
    - my_display
  touchscreens:
    - my_touchscreen
  pages:
    - id: main_page
      widgets:
        - label:
            align: CENTER
            text: 'Hello World!'


  